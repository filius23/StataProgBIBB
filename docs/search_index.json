[["data.html", "5 Dateien- und DoFile-Verwaltung 5.1 dir - alles einlesen 5.2 Verzeichnisse &amp; DoFiles erstellen 5.3 Master DoFile 5.4 Übungen 5.5 Anhang", " 5 Dateien- und DoFile-Verwaltung 5.1 dir - alles einlesen glo pfad &quot;D:\\oCloud\\Home-Cloud\\Lehre\\BIBB\\StataProgBIBB\\projekt&quot; global filelist: dir . files &quot;*.*&quot; //Lister aller Dateien mac l filelist global dtalist: dir &quot;${pfad}&quot; files &quot;baua*.dta&quot; // Liste aller .dta-Dateien mac l dtalist loc usefile `: word 1 of ${dtalist}&#39; // erster Eintrag aus der Liste dis &quot;${pfad}/`usefile&#39;&quot; use &quot;${pfad}/`usefile&#39;&quot;, clear // dta laden loc n_datasets : list sizeof global(dtalist) // anzahl dta einträge foreach i of numlist 2(1)`n_datasets&#39; { loc appendfile `: word `i&#39; of ${dtalist}&#39; // name aus list aufrufen qui append using &quot;${pfad}/`appendfile&#39;&quot; // append dis &quot;`appendfile&#39; appended&quot; // Kontrolle } , respectcase: global dtalist: dir \"${pfad}\" files \"baua*.dta , respectcase\" würde BAUA.dta ignorieren. 5.1.1 copy Mit copy können wir Dateien kopieren. loc usefile `: word 1 of ${dtalist}&#39; // erster Eintrag aus der Liste loc copyfile &quot;copy_`usefile&#39;&quot; dis &quot;`usefile&#39;&quot; dis &quot;`copyfile&#39;&quot; copy ${pfad}/`usefile&#39; ${pfad}/`copyfile&#39; , replace // hat das geklappt? global dtalist2: dir &quot;${pfad}&quot; files &quot;*baua*.dta&quot; // Liste aller .dta-Dateien mac l dtalist mac l dtalist2 5.1.2 erase Mit erase können wir Dateien löschen. loc usefile `: word 1 of ${dtalist}&#39; // erster Eintrag aus der Liste loc copyfile &quot;copy_`usefile&#39;&quot; erase ${pfad}/`copyfile&#39; // hat auch das geklappt? global dtalist3: dir &quot;${pfad}&quot; files &quot;*baua*.dta&quot; // Liste aller .dta-Dateien mac l dtalist mac l dtalist2 mac l dtalist3 Übung 1 5.2 Verzeichnisse &amp; DoFiles erstellen Mit mkdir können wir Verzeichnisse erstellen: global pfad &quot;D:\\oCloud\\Home-Cloud\\Lehre\\BIBB\\StataProgBIBB\\projekt&quot; mkdir &quot;${pfad}/data&quot; mkdir &quot;${pfad}/log&quot; mkdir &quot;${pfad}/graph&quot; mkdir &quot;${pfad}/results&quot; mkdir &quot;${pfad}/tables&quot; file können wir nutzen, um ein DoFile mit globals zu erstellen (oder natürlich auch locals oder allen anderen Informationen): *erstelle doFile fuer macros -&gt; kurzes doFile um Pfade in Schleifen richtig zu setzen, wird dann in Schleifen immer aufgerufen file open macros using ${prog}\\macrodofile.do, write replace file write macros &quot;glo pfad ${pfad} &quot; _n file write macros &quot;glo orig ${orig} &quot; _n file write macros &quot;glo data ${data} &quot; _n file write macros &quot;glo log ${log} &quot; _n file write macros &quot;glo res ${results}&quot; _n file write macros &quot;glo graph ${graph} &quot; _n file write macros &quot;glo prog ${prog} &quot; _n file close macros 5.3 Master DoFile 5.3.1 DoFile mit Argumenten starten Ein DoFile kann auch direkt aus einem Master-DoFile gestartet werden. Werte, die wir danach angeben, können im DoFile mit der Angabe der Position abgerufen werden: do &quot;${prog}/051_DoFile.do&quot; 2 use &quot;${orig}/BIBBBAuA_2018_suf1.0.dta&quot;, clear dis &quot;Auszählung für `1&#39;&quot; tab S1 if m1202 == `1&#39; do &quot;${prog}/051_DoFile2.do&quot; 4 2 mobil local ausb `1&#39; local gend `2&#39; local var `3&#39; use &quot;${orig}/BIBBBAuA_2018_suf1.0.dta&quot;, clear dis &quot;Auszählung für Ausbildung = `ausb&#39; &amp; Geschlecht = `gend&#39;&quot; tab gkpol if m1202 == `ausb&#39; &amp; S1 == `gend&#39; tab gkpol `var&#39; if m1202 == `ausb&#39; &amp; S1 == `gend&#39; 5.3.2 in neuer Session starten cd ${prog} winexec `c(sysdir_stata)&#39;StataSE-64.exe do &quot;${prog}/052_DoFile1.do&quot; 4 2 mobil Startet 052_DoFile1.do in einer neuen Session. Achtung: hier sind dann auch die globals, locals usw. weg. Um die globals zu übernehmen, muss dann ein macrodofile eingebunden werden. 5.3.3 mehrere Sessions starten forvalues s = 1/2{ cd ${prog} winexec `c(sysdir_stata)&#39;StataSE-64.exe do &quot;${prog}/052_DoFile1.do&quot; 4 `s&#39; mobil } Übung 2 5.4 Übungen 5.4.1 Übung Im zip-Ordner finden sich auch .csv-Dateien und PDFs. Erstellen Sie eine Schleife mit if-Bedingung, sodass die csv-Dateien eingelesen werden, die PDF Dateien aber übergangen werden. Verwenden Sie also die filelist statt der dtalist von oben. Lesen Sie mit import delimited \".... baua3.csv\", delimiter(\";\") encoding(ISO-8859-2) clear die csv-Dateien jeweils ein und legen Sie als dta ab. Anschließend können Sie den dta-Schleife von oben verwenden, um alle Teildatensätze einzulesen. Kommen Sie auf am Ende wieder auf 20012 Befragte? Kopieren Sie eine der Dateien und löschen Sie sie anschließend wieder. 5.4.2 Übung Starten Sie getrennte Au 5.5 Anhang weitere File-Loops "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
